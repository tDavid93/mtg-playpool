
##
*~
~$*
*$py.class
$tf/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
activate_openai
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
AppPackages/
*.appx
*.appxbundle
*.appxupload
*.aps
artifacts/
ASALocalRun/
# ASP.NET Scaffolding
AutoTest.Net/
.axoCover/*
# AxoCover is a Code Coverage Tool
!.axoCover/settings.json
*.azurePubxml
# Azure Stream Analytics local run output
Backup*/
# Backup folder for Package Reference Convert tool in Visual Studio 2017
# Backup & report files from converting an old project file
*- [Bb]ackup ([0-9][0-9]).rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup.rdl
[Bb]in/
[Bb]uild[Ll]og.*
# BeatPulse healthcheck temp database
# because we have git ;-)
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
BenchmarkDotNet.Artifacts/
# Benchmark Results
*.bim.layout
*.bim_*.settings
bin
bin/
*.binlog
# BizTalk build output
bld/
#bower_components/
bower_components
# Bower dependency directory (https://bower.io/)
*.btm.cs
*.btp.cs
build/
*.build.csdef
build/Release
# Build results
# Build Results of an ATL Project
.builds
BundleArtifacts/
# Business Intelligence projects
# but database connection strings (with potential passwords) will be unencrypted
# but keep track of directories ending in .cache
# Byte-compiled / optimized / DLL files
*.cab
.cache
.cache/
*.cachefile
# Cake - Uncomment if you are using it
!?*.[Cc]ache/
*.[Cc]ache
celerybeat.pid
celerybeat-schedule
# Celery stuff
# C extensions
# checkin your Azure Web App publish settings, but sensitive information contained
_Chutzpah*
# Chutzpah Test files
# Click-Once directory
ClientBin/
# CodeRush personal settings
*.code-workspace
# Comment in the public line in if your project uses Gatsby and not Next.js
#   commonly ignored for libraries.
# Compiled binary addons (https://nodejs.org/api/addons.html)
*.cover
cover/
*.coverage
.coverage
.coverage.*
coverage
# Coverage directory used by tools like istanbul
coverage*.info
coverage*.json
*.coveragexml
coverage*.xml
coverage.xml
# Coverlet is a free, cross platform Code Coverage Tool
.cr/personal
.*crunch*.local.xml
csx/
cython_debug/
# Cython debug symbols
*.dbmdl
*.dbproj.schemaview
db.sqlite3
db.sqlite3-journal
[Dd]ebug/
[Dd]ebugPS/
[Dd]ebugPublic/
# Dependency directories
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
develop-eggs/
# Diagnostic reports (https://nodejs.org/api/report.html)
# Directory for instrumented libs generated by jscoverage/JSCover
dist
dist/
# Distribution / packaging
# Django stuff:
dlldata.c
.dmypy.json
dmypy.json
DocProject/buildhelp/
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/html
DocProject/Help/Html2
DocProject/Help/*.HxC
DocProject/Help/*.HxT
# DocProject is a documentation generator add-in
docs/_build/
.docusaurus
# Docusaurus cache and generated files
*.dotCover
# DotCover is a Code Coverage Tool
# dotenv environment variable files
*.DotSettings.user
downloads/
*.dsp
*.dsw
.dynamodb/
# DynamoDB Local files
*.e2e
ecf/
[Ee]xpress/
*.egg
*.egg-info/
.eggs/
eggs/
.env
env/
ENV/
env.bak/
.env.development.local
# Environments
.env.local
.env.production.local
.env.test.local
.eslintcache
# except build/, which is used as an MSBuild target.
.fake/
# FAKE - F# Make
FakesAssemblies/
# Files built by Visual Studio
# files ending in .cache can be ignored
## files generated by popular Visual Studio add-ons.
# Flask stuff:
# Fody - auto-generated XML schema
FodyWeavers.xsd
#   For a library or package, you might want to ignore these files since the code is
.fusebox/
# FuseBox cache
# Gatsby files
Generated_Code/
Generated\ Files/
## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore
# GhostDoc plugin setting file
*.GhostDoc.xml
# gitignore template for Jupyter Notebooks
#   git rm -r .ipynb_checkpoints/
*.gpState
.grunt
# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
# Guidance Automation Toolkit
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
healthchecksdb
*_h.h
.history/
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
**/*.HTMLClient/GeneratedArtifacts
htmlcov/
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
# https://nextjs.org/blog/next-9-1#public-directory-support
#   https://pdm.fming.dev/#use-with-ide
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
.hypothesis/
*_i.c
#.idea/
## Ignore Visual Studio temporary files, build results, and
*.ilk
include
include/
# Including strong name files can present a security risk
#   install all needed dependencies.
.installed.cfg
# Installer logs
# Installshield output folder
instance/
#   intended to run in multiple environments; otherwise, check them in:
# in these scripts will be unencrypted
#   in version control.
*.iobj
.ionide/
# Ionide (cross platform F# VS Code tools) working folder
ipch/
*.ipdb
*.ipynb
*/.ipynb_checkpoints/*
.ipynb_checkpoints
# IPython
ipython_config.py
# JetBrains Rider
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
*.jfm
*.jmconfig
jspm_packages/
# Jupyter Notebook
*.lcov
*.ldf
lerna-debug.log*
lib
lib/
lib64
lib64/
lib-cov
[Ll]og/
[Ll]ogs/
.localhistory/
# Local History for Visual Studio
# Local History for Visual Studio Code
local_settings.py
.lock-wscript
*.log
logs
# Logs
__MACOSX
*.manifest
MANIFEST
*.mdf
*.meta
.mfractor/
# MFractors (Xamarin productivity tool) working folder
# Microbundle cache
# Microsoft Azure Build Output
# Microsoft Azure Emulator
# Microsoft Azure Web App publish settings. Comment the next line if you want to
# Microsoft Fakes
# MightyMoose
MigrationBackup/
# mkdocs documentation
*.mm.*
*.mo
# Mono auto generated files
mono_crash.*
# MSBuild Binary and Structured Log
*.msi
*.msix
*.msm
*.msp
# MSTest test Results
# mypy
.mypy_cache/
*.ncb
# NCrunch
_NCrunch_*
nCrunchTemp_*
*.ndf
# .NET Core
.next
# Next.js build output
# Node.js Tools for Visual Studio
node_modules/
.node_repl_history
# node-waf configuration
nosetests.xml
# Note: Comment the next line if you want to checkin your web deploy settings,
.nox/
.npm
npm-debug.log*
.ntvs_analysis.dat
# NuGet Packages
*.nuget.props
# NuGet Symbol Packages
*.nuget.targets
# NuGet v3's project.json files produces more ignorable files
# NUnit
nunit-*.xml
*.nupkg
.nuxt
# Nuxt.js build / generate output
# NVidia Nsight GPU debugger configuration file
*.nvuser
.nyc_output
# nyc test coverage
*.obj
*.odx.cs
[Oo]bj/
OpenCover/
# OpenCover UI analysis results
*.opendb
*.opensdf
*.opt
# Optional eslint cache
# Optional npm cache directory
# Optional REPL history
# Optional stylelint cache
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
orleans.codegen.cs
# Others
out
# Output of 'npm pack'
Package.StoreAssociation.xml
# Paket dependency manager
paket-files/
.paket/paket.exe
# parcel-bundler cache (https://parceljs.org/)
.parcel-cache
parts/
*_p.c
*.pch
*.pdb
# pdm
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
.pdm.toml
# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
*.pfx
*.pgc
*.pgd
*.pid
*.pidb
*.pid.lock
pids
pip-delete-this-directory.txt
# pipenv
#Pipfile.lock
pip-log.txt
_pkginfo.txt
*.plg
.pnp.*
.pnpm-debug.log*
# poetry
#poetry.lock
*.pot
**/[Pp]ackages/*
!**/[Pp]ackages/build/
#!**/[Pp]ackages/repositories.config
*.[Pp]ublish.xml
profile_default/
project.fragment.lock.json
project.lock.json
*.psess
# public
publish/
*.publishproj
PublishScripts/
*.publishsettings
# Publish Web Output
*.pubxml
_Pvt_Extensions
.pybuilder/
# PyBuilder
*.pyc
__pycache__
__pycache__/
# PyCharm
*.py[cod]
*.py,cover
# pyenv
# PyInstaller
__pypackages__/
.pyre/
# Pyre type checker
.pytest_cache/
.Python
# Python Tools for Visual Studio (PTVS)
# .python-version
.pytype/
# pytype static type analyzer
rcf/
*.rdl.data
# Remove previous ipynb_checkpoints
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
_ReSharper*/
# ReSharper is a .NET coding add-in
# RIA/Silverlight projects
.ropeproject
# Rope project settings
.rpt2_cache/
*.rptproj.bak
*.rptproj.rsuser
[Rr]elease/
[Rr]eleasePS/
[Rr]eleases/
*.[Rr]e[Ss]harper
*.rsp
*.rsuser
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/
# Runtime data
# SageMath parsed files
*.sage.py
*.sap
.sass-cache/
*.sbr
ScaffoldingReadMe.txt
*.scc
.scrapy
# Scrapy stuff:
*.sdf
sdist/
*.seed
**/*.Server/GeneratedArtifacts
.serverless/
# Serverless directories
**/*.Server/ModelManifest.xml
ServiceFabricBackup/
share/
share/python-wheels/
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
# Since there are multiple workflows, uncomment next line to ignore bower_components
/site
*.sln.docstates
*.sln.iml
#*.snk
# Snowpack dependency directory (https://snowpack.dev/)
*.snupkg
*.so
*.spec
# Sphinx documentation
.spyderproject
# Spyder project settings
.spyproject
# SQL Server files
# Stores VSCode versions used for testing VSCode extensions
# StyleCop
StyleCopReport.xml
.stylelintcache
*.suo
*.svclog
# Tabs Studio
target/
_TeamCity*
# TeamCity is a build add-in
# Telerik's JustMock configuration file
.temp
# TernJS port file
.tern-port
TestResult.xml
# TFS 2012 Local Workspace
*.tgz
# The packages folder can be ignored because of Package Restore
#   This is especially recommended for binary packages to ensure reproducibility, and is more
tile*.png
*.tlb
*.tlh
*.tli
*.tlog
*.tmp
*.tmp_proj
# to a newer Visual Studio version. Backup files are not needed,
# tools/**
# !tools/packages.config
.tox/
# Translations
*.tsbuildinfo
*.tss
[Tt]est[Rr]esult*/
# TypeScript cache
# Uncomment if necessary however generally it will be regenerated when needed
# Uncomment if you have tasks that create the project's static files in wwwroot
# Unit test / coverage reports
UpgradeLog*.htm
UpgradeLog*.XML
_UpgradeReport_Files/
*.user
*.userosscache
*.userprefs
# User-specific files
# User-specific files (MonoDevelop/Xamarin Studio)
#  Usually these files are written by a python script from a template
var/
*.vbp
*.vbw
*.VC.db
*.VC.VC.opendb
.venv
venv/
venv.bak/
# Visual C++ cache files
*.VisualState.xml
# Visual Studio 2015/2017 cache/options directory
# Visual Studio 2017 auto generated files
# Visual Studio 6 auto-generated project file (contains which files were open etc.)
# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
# Visual Studio 6 build log
# Visual Studio 6 technical files
# Visual Studio 6 workspace and project file (working project files containing files to include in project)
# Visual Studio 6 workspace options file
# Visual Studio cache files
# Visual Studio code coverage results
# Visual Studio History (VSHistory) files
# Visual Studio LightSwitch build output
# Visual Studio profiler
# Visual Studio Trace Files
.vs/
.vscode/*
!.vscode/extensions.json
# VS Code files for those working on multiple tools
!.vscode/launch.json
!.vscode/settings.json
!.vscode/tasks.json
.vscode-test
.vshistory/
*.vsp
*.vspscc
*.vspx
*.vssscc
# vuepress build output
.vuepress/dist
# vuepress v2.x temp and cache directory
.webassets-cache
web_modules/
# website: http://jupyter.org/
# Web workbench (sass)
wheels/
# Windows Installer files from build outputs
# Windows Store app package directories and files
*_wpftmp.csproj
[Ww][Ii][Nn]32/
#wwwroot/
x64/
x86/
*.xsd.cs
.yarn/build-state.yml
.yarn/cache
yarn-debug.log*
yarn-error.log*
.yarn/install-state.gz
.yarn-integrity
# Yarn Integrity file
.yarn/unplugged
# yarn v2
pyvenv.cfg
backend/app/all_my_cards.csv
backend/app/AtomicCards.json
backend/app/embeddings/mixedbread-ai/mxbai-embed-large-v1.npy
